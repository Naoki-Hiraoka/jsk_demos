#!/usr/bin/env roseus

(ros::load-ros-manifest "roseus")
(ros::roseus "send_motion")

(defclass string-cb-class
  :super propertied-object
  :slots ())
(defmethod string-cb-class
  (:init () (ros::subscribe "controller" std_msgs::string #'send self :string-cb))
  (:string-cb (msg)
	      (let ((str (send msg :data))) 
		(ros::ros-info (format nil str))
		(when (equal str "look-up")
		  (send *fetch* :head :neck-p :joint-angle (+ (send *fetch* :head :neck-p :joint-angle) 5))
		  (send *ri* :angle-vector (send *fetch* :angle-vector)))
		(when (equal str "look-down")
		  (send *fetch* :head :neck-p :joint-angle (- (send *fetch* :head :neck-p :joint-angle) 5))
		  (send *ri* :angle-vector (send *fetch* :angle-vector)))
		(when (equal str "look-right")
		  (send *fetch* :head :neck-y :joint-angle (- (send *fetch* :head :neck-y :joint-angle) 5))
		  (send *ri* :angle-vector (send *fetch* :angle-vector)))
		(when (equal str "look-left")
		  (send *fetch* :head :neck-y :joint-angle (+ (send *fetch* :head :neck-y :joint-angle) 5))
		  (send *ri* :angle-vector (send *fetch* :angle-vector)))
		(when (equal str "move-forward")
		  (send *fetch* :move-to (send (make-coords :pos #f(10 0 0)) :transform (send *fetch* :worldcoords) :world) :world)
		  (send *ri* :move-to (send *fetch* :worldcoords) :frame-id "eng2"))
		(when (equal str "move-backward")
		  (send *fetch* :move-to (send (make-coords :pos #f(-10 0 0)) :transform (send *fetch* :worldcoords) :world) :world)
		  (send *ri* :move-to (send *fetch* :worldcoords) :frame-id "eng2"))
		(when (equal str "move-right")
		  (send *fetch* :move-to (send (make-coords :pos #f(0 -10 0)) :transform (send *fetch* :worldcoords) :world) :world)
		  (send *ri* :move-to (send *fetch* :worldcoords) :frame-id "eng2"))
		(when (equal str "move-left")
		  (send *fetch* :move-to (send (make-coords :pos #f(0 10 0)) :transform (send *fetch* :worldcoords) :world) :world)
		  (send *ri* :move-to (send *fetch* :worldcoords) :frame-id "eng2"))
		(when (equal str "turn-right")
		  (send *fetch* :move-to (send (send *fetch* :copy-worldcoords) :rotate (/ -pi 36) :z :world) :world)
		  (send *ri* :move-to (send *fetch* :worldcoords) :frame-id "eng2"))
		(when (equal str "turn-left")
		  (send *fetch* :move-to (send (send *fetch* :copy-worldcoords) :rotate (/ pi 36) :z :world) :world)
		  (send *ri* :move-to (send *fetch* :worldcoords) :frame-id "eng2"))
		(when (equal str "update")
		  (send *fetch* :angle-vector (send *ri* :state :potentio-vector)))
		(when (equal str "hand-up")
		  (send *fetch* :rarm :inverse-kinematics (send (send (send *fetch* :rarm :end-coords :copy-worldcoords) :transform (make-coords :pos (send (send (cadr (send *fetch* :head)) :worldcoords) :rotate-vector #f(0 0 10))) :world) :replace-coords (send (cadr (send *fetch* :head)) :worldrot)))
		  (send *ri* :angle-vector (send *fetch* :angle-vector))
		  )
		(when (equal str "hand-down")
		  (send *fetch* :rarm :inverse-kinematics (send (send (send *fetch* :rarm :end-coords :copy-worldcoords) :transform (make-coords :pos (send (send (cadr (send *fetch* :head)) :worldcoords) :rotate-vector #f(0 0 -10))) :world) :replace-coords (send (cadr (send *fetch* :head)) :worldrot)))
		  (send *ri* :angle-vector (send *fetch* :angle-vector))
		  )
		(when (equal str "hand-right")
		  (send *fetch* :rarm :inverse-kinematics (send (send (send *fetch* :rarm :end-coords :copy-worldcoords) :transform (make-coords :pos (send (send (cadr (send *fetch* :head)) :worldcoords) :rotate-vector #f(0 -10 0))) :world) :replace-coords (send (cadr (send *fetch* :head)) :worldrot)))
		  (send *ri* :angle-vector (send *fetch* :angle-vector))
		  )
		(when (equal str "hand-left")
		  (send *fetch* :rarm :inverse-kinematics (send (send (send *fetch* :rarm :end-coords :copy-worldcoords) :transform (make-coords :pos (send (send (cadr (send *fetch* :head)) :worldcoords) :rotate-vector #f(0 10 0))) :world) :replace-coords (send (cadr (send *fetch* :head)) :worldrot)))
		  (send *ri* :angle-vector (send *fetch* :angle-vector))
		  )
		(when (equal str "hand-forward")
		  (send *fetch* :rarm :inverse-kinematics (send (send (send *fetch* :rarm :end-coords :copy-worldcoords) :transform (make-coords :pos (send (send (cadr (send *fetch* :head)) :worldcoords) :rotate-vector #f(10 0 0))) :world) :replace-coords (send (cadr (send *fetch* :head)) :worldrot)))
		  (send *ri* :angle-vector (send *fetch* :angle-vector))
		  )
		(when (equal str "hand-backward")
		  (send *fetch* :rarm :inverse-kinematics (send (send (send *fetch* :rarm :end-coords :copy-worldcoords) :transform (make-coords :pos (send (send (cadr (send *fetch* :head)) :worldcoords) :rotate-vector #f(-10 0 0))) :world) :replace-coords (send (cadr (send *fetch* :head)) :worldrot)))
		  (send *ri* :angle-vector (send *fetch* :angle-vector))
		  )
	      )))
(setq m (instance string-cb-class :init))
(ros::rate 10)
(do-until-key
 (ros::spin-once)
 (send *irtviewer* :look-all *fetch*)
 (x::window-main-one)
 )
